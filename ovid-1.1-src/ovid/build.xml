<project name="ovid" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">


    <!-- begin ivy -->
    <!-- some variables used -->
    <property name="ivy.lib.dir" value="${basedir}/contrib/lib" />
    <property name="build.dir" value="${basedir}/bin" />
    <property name="src.dir" value="${basedir}/src" />


    <property name="ivy.install.version" value="2.0.0-beta1" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <property name="ivy.settings.dir" value="." />
    <!-- <ivy:settings file="${ivy.settings.dir}/ivysettings.xml" /> -->
    <!-- ivy properties used -->
    <property name="ivy.settings.dir" value="." />

    <!-- paths used for compilation and run  -->
    <path id="lib.path.id">
        <fileset dir="${ivy.lib.dir}" />
    </path>


    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" ignoreerrors="true" usetimestamp="true"/>
    </target>

    <!-- =================================
          target: install-ivy
            this target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy in your ant lib, you can simply remove this
            target and the dependency the 'go' target has on it
         ================================= -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                  uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- =================================
          target: resolve
         ================================= -->
    <target name="resolve" depends="install-ivy" description="--> resolve and retrieve dependencies with ivy">
        <ivy:retrieve/>
    </target>

    <target name="clean-cache" description="--> clean the ivy cache">
        <ivy:cleancache />
    </target>

    <!-- =================================
          target: report
         ================================= -->
    <target name="report" depends="resolve" description="--> generates a report of dependencies">
        <ivy:report todir="${build.dir}"/>
    </target>

    <!-- end ivy -->

    <property environment="env"/>

    <property file="build.properties" />

    <target name="init">
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${dest.dir}"/>
    </target>

    <target name="clean">
        <delete dir="${dest.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="build"/>
        <delete dir="${javadoc.dir}"/>
        <delete dir="docs"/>
        <delete dir="${dist.dir}"/>

        <delete dir="test-output"/>
        <delete dir="test-report"/>
        <delete dir="dist"/>
        <delete>
            <fileset dir=".">
                <include name="**/*.log"/>
            </fileset>
        </delete>

    </target>

    <target name="clobber" depends="clean">
        <delete dir="contrib/lib"/>
    </target>

    <path id="ovid.lib.path">
        <pathelement location="${slf4j.jar}"/>
        <pathelement location="${testNG.jar}"/>
        <pathelement location="${junit.jar}"/>
    </path>

    <path id="ovid.path">
        <path refid="ovid.lib.path"/>
        <pathelement location="${src.includes}"/>
    </path>

    <target name="build" depends="resolve,compile,jar"/>

    <target name="compile" depends="init">
        <javac destdir="${dest.dir}" debug="${debug.flag}" includeantruntime="false">
            <src path="${src.includes}" />
            <src path="${test.includes}" />
            <classpath refid="ovid.lib.path"/>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <jar jarfile="${lib.dir}/ovid.jar">

            <fileset dir="${dest.dir}">
                <include name="**/*.class"/>
                <include name="${version.file}" />
                <exclude name="**/Test*.class"/>
            </fileset>
            <fileset dir=".">
                <include name="resources/*.zip"/>
                <include name="config/**"/>
            </fileset>
            <fileset dir="${src.includes}">
                <include name="META-INF/**/*" />
            </fileset>
        </jar>
    </target>

    <target name="rebuild" depends="clean,build">
    </target>


    <target name="javadoc" depends="compile">
        <javadoc destdir="${javadoc.dir}" author="true" verbose="false"
                version="true" classpathref="ovid.path"
                use="true" additionalparam="-quiet" windowtitle="OVID">

            <fileset dir="${src.includes}" defaultexcludes="yes">
                <include name="com/medsphere/**" />
                <include name="org/medsphere/**" />
                <include name="gov/va/med/**" />
                <exclude name="com/medsphere/test/**" />
                <exclude name="com/medsphere/**/*.txt" />
                <exclude name="com/medsphere/**/*.xml" />
                <exclude name="gov/va/med/**/*.txt" />
            </fileset>

        </javadoc>
    </target>

    <target name="javadoc-rtf" depends="compile">
        <available file="${docflex.doclet.jar}" property="isFileAvail"/>
        <fail unless="isFileAvail" message= "Did not find file '${docflex.doclet.jar}'. This file may be downloaded from http://www.filigris.com/downloads/license_agreement.php?pid=docflex-doclet"/>
        <javadoc destdir="${javadoc.dir}" author="true" verbose="false"
		version="true" classpathref="ovid.path"
		doclet="com.docflex.javadoc.Doclet" docletpath="${docflex.doclet.jar}"
                use="false" additionalparam="-quiet -nodialog -format RTF -d &quot;${basedir}\${javadoc.dir}&quot; -f ovid-api.rtf -launchviewer=false">

            <fileset dir="${src.includes}" defaultexcludes="yes">
                <include name="com/medsphere/**" />
                <include name="org/medsphere/**" />
                <include name="gov/va/med/**" />
                <exclude name="com/medsphere/test/**" />
                <exclude name="com/medsphere/**/*.txt" />
                <exclude name="com/medsphere/**/*.xml" />
                <exclude name="gov/va/med/**/*.txt" />
            </fileset>

      </javadoc>
    </target>

    <!-- to run frome eclipse:
         Window->Preferences->Ant->Runtime, goto [Classpath] tab
         Add External Jar in Ant Home Entries and point to contrib/testNG/testng*.jar, [Apply]
         Goto [Tasks] tab
         Add a task named testng that references testng*.jar applied above, pointing to:
         com.beust.testng.TestNGAntTask.class
    -->

    <target name="create-version-file">
        <echo append="false" file="${dest.dir}/${version.file}" message="${version.major}.${version.minor}.${version.revision}."/>

        <exec failifexecutionfails="false" append="true" executable="bzr" output="${dest.dir}/${version.file}">
            <arg value="revno" />
        </exec>
    </target>

    <target name="dist" depends="clean,resolve,compile,create-version-file,jar,run-unit-tests">
        <copy file="lib/ovid.jar" todir="${medsphere.contrib.dir}" />
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/ovid-src-${version.major}.${version.minor}.${version.revision}.zip">
            <zipfileset dir="." prefix="ovid">
                <exclude name="bin/"/>
                <exclude name="${dist.dir}/"/>
                <exclude name="${contrib.dir}/lib/"/>
                <exclude name="test-*/"/>
                <exclude name=".*/"/>
            </zipfileset>
          </zip>

    </target>

    <path id="unit.test.class.path">
        <path refid="ovid.path"/>
        <pathelement location="${testNG.jar}"/>
        <pathelement location="${apache.commons.logging.jar}"/>
        <pathelement location="${apache.commons.logging.api.jar}"/>
        <pathelement location="${dest.dir}"/>
        <pathelement location="${junit.jar}"/>
    </path>

    <target name="prepare-testng">
        <taskdef
          name="testng"
           classname="com.beust.testng.TestNGAntTask"
           classpathref="unit.test.class.path"
      />
    </target>

    <target name="run-unit-tests" depends="compile, prepare-testng">
        
        <testng classpathref="unit.test.class.path"
                outputDir="test-output"
                sourcedir="${src.test.includes}"                
                haltOnfailure="true">
            <xmlfileset dir="." includes="**/OvidUnitTestSuite.xml"/>
        </testng>
        <delete dir="test-report"/>
        <mkdir dir="test-report"/>

        <junitreport todir="test-report">
          <fileset dir="test-output">
            <include name="*/*.xml"/>
          </fileset>

          <report format="noframes"  todir="test-report"/>
        </junitreport>
        
    </target>

    <target name="run-acceptance-tests" depends="compile,prepare-testng">
        <testng classpathref="unit.test.class.path"
                outputDir="test-output"
                sourcedir="${src.test.includes}"
                haltOnfailure="true">
            <xmlfileset dir="." includes="**/OvidAcceptanceTestSuite.xml"/>
        </testng>

    </target>
</project>
